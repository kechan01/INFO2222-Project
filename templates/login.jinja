<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %} 
    <style>
        body {
            font-family: 'Arial', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .login-container {
            text-align: center;
            margin-top: -100px;
        }

        .input-container {
            margin-bottom: 10px;
        }

        .input-container input {
            border-radius: 5px;
            padding: 8px;
            width: 200px;
            font-family: 'Arial', sans-serif;
        }

        .login-button {
            background-color: #04AA6D;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 12px 30px;
            cursor: pointer;
            font-family: 'Arial', sans-serif;
            margin-right: 10px;
        }

        .signup-button {
            background-color: white;
            color: black; /* Set text color to black for better visibility */
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            cursor: pointer;
            font-family: 'Arial', sans-serif;
        }
        
        h1 {
            font-size: 36px;
        }

        p {
            font-size: 18px;
        }

    </style>

    <div class="login-container">
        <h1>Welcome to UsydHelp!</h1>
        <p>Academic Platform for Students</p>
        <h2>Log in</h2>

        <div class="input-container">
            <input type="text" id="username" placeholder="Username">
        </div>
        
        <div class="input-container">
            <input type="password" id="password" placeholder="Password">
        </div>

        <button class="login-button" onclick="login()">Login</button>
        <a href={{ url_for('signup') }} class="signup-button">Sign Up</a>
    </div>

    
    <!-- CryptoJS library for hashing password -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/pbkdf2.min.js"></script>

    <script>

        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        function hashPassword(password) {
            return CryptoJS.SHA256(password).toString();
        }

        // login function to well login...
        async function login() {
            // this fancy syntax is part of the Jinja syntax
            // login_user is a Python function, this gets the URL that calls that Python function
            // you know the one with the:
            // app.route("/login/user", methods=["POST"])
            // login_user()
            // so... "{{ url_for('login_user')}}" 
            // gives us -> "http://blabla/login/user"
            let loginURL = "{{ url_for('login_user') }}";

            let username = $("#username").val();
            let password = $("#password").val();
            let hashedPassword = hashPassword(password); // Hash the password

            // creates a symmetric key from the password for this user session for encrypting messages
            const passwordKey = deriveKeyFromPassword(password);
            sessionStorage.setItem("passwordKey", passwordKey);
            // console.log("passwordKey " + sessionStorage.getItem("passwordKey"));

            // axios post is a fancy way of posting a request to the server,
            // we pass in the username and password here
            let res = await axios.post(loginURL, {
                username: username,
                password: hashedPassword
            });

            // if the server sends in an error message, alert() the error message
            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            }

            // redirects to the URL (ie. res.data),
            // we use _self here since we all hate that moment
            // when the browser opens a new tab
            window.open(res.data, "_self");
        }

        function deriveKeyFromPassword(password) {
            // Convert the password and salt to WordArrays
            var passwordWordArray = CryptoJS.enc.Utf8.parse(password);
            var saltWordArray = CryptoJS.enc.Hex.parse(generateRandomSalt(18));

            // Derive the key using PBKDF2
            var key = CryptoJS.PBKDF2(passwordWordArray, saltWordArray, {
                keySize: 256 / 32, // keySize is in bits, so divide by 32 to get the number of 32-bit words
                iterations: 1000
            });

            return key;
        }

        // Function to generate a random salt using crypto.getRandomValues()
        function generateRandomSalt(length) {
            var charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            var salt = '';
            var randomValues = new Uint8Array(length);
            window.crypto.getRandomValues(randomValues);
            for (var i = 0; i < length; i++) {
                var randomIndex = randomValues[i] % charset.length;
                salt += charset[randomIndex];
            }
            return salt;
        }

    
    </script>
{% endblock %}
