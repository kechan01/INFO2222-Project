<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
    </ol>
</nav>

<h1>Messaging App </h1>

<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>
</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js"></script>
<script>
    let room_id = 0;
    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(async () => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
        
        // Generate public and private keys
        const keyPair = await generateKeys();
        const publicKeyExported = await exportPublicKey(keyPair.publicKey);
        sessionStorage.setItem("publicKey", publicKeyExported);

        const privateKeyExported = await exportPrivateKey(keyPair.privateKey);
        sessionStorage.setItem("privateKey", privateKeyExported);
        console.log("Public" + sessionStorage.getItem("publicKey"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })

    // receiver being asked by sender to send the public key
    socket.on("ask_receiver_public_key", () => {
        // sending the public key
        socket.emit("send_receiver_public_key", sessionStorage.getItem("publicKey"), room_id);
        console.log("receiver sends " + sessionStorage.getItem("publicKey"));
    });

    // sender receives the public key from the receiver and encrypts the secretKey and send to receiver
    socket.on("send_receiver_public_key", async (receiver_public_key) => {
        console.log("sender receives and send " + sessionStorage.getItem("secretKey"));        
        const publicKey = await importPublicKey(receiver_public_key);
        console.log("sender receives " + receiver_public_key);

        console.log("sender receives " + publicKey);

        //encrypts the receiver public key 
        const encryptedSecretKey = await encryptData(sessionStorage.getItem("secretKey"), publicKey);
        socket.emit("send_receiver_secret_key", encryptedSecretKey, room_id);
    });

    // receiver receives the encrypted secret key and decrypts it
    socket.on("send_receiver_secret_key", async (encrypted_secret_key) => {
        // decrypts the secret key 
        const privateKey = sessionStorage.getItem("privateKey");
        const importedPrivateKey = await importPrivateKey(privateKey, "pkcs8", "RSA-OAEP", true, ["decrypt"]);
        const decryptedSecretKey = decryptData(encrypted_secret_key, importedPrivateKey);
        sessionStorage.setItem("secretKey", decryptedSecretKey);
        console.log("receiver receives secret key" + decryptedSecretKey);

    });


    // Function to generate a random secret key
    function generateSecretKey() {
        // Define the length of the key in bytes (e.g., 16 bytes for a 128-bit key)
        const keyLength = 16; // You can adjust the length as needed for your use case

        // Generate random bytes
        const randomBytes = new Uint8Array(keyLength);
        window.crypto.getRandomValues(randomBytes);

        return randomBytes;
    }


    // Function to generate Diffie-Hellman keys
    async function generateKeys() {
        const keyPair = await window.crypto.subtle.generateKey(
        {
            name: "RSA-OAEP",
            modulusLength: 4096,
            publicExponent: new Uint8Array([1, 0, 1]),
            extractable: false,
            hash: {
                name: "SHA-256"
            }
        },
        true,
        ["encrypt", "decrypt"],
        );
        return keyPair;
    }

    // Function to calculate MAC for a message
    function calculateMAC(message, key) {
        // Calculate HMAC-SHA256 using the shared key
        const hmac = CryptoJS.HmacSHA256(message, key);
        return hmac.toString();
    }

    async function encryptData(data, key) {
        const algorithm = { name: 'RSA-OAEP', hash: { name: 'SHA-256' } };
        const encodedData = new TextEncoder().encode(data);
        const encryptedBuffer = await crypto.subtle.encrypt(algorithm, key, encodedData);
        return encryptedBuffer;
    }

    function decryptData(data, key) {
        return crypto.subtle.decrypt(
            {
            name: "RSA-OAEP",
            },
            key,
            textToArrayBuffer(data)
        )
    }

    /*
    Convert an ArrayBuffer into a string
    from https://developer.chrome.com/blog/how-to-convert-arraybuffer-to-and-from-string/
    */
    function ab2str(buf) {
        return String.fromCharCode.apply(null, new Uint8Array(buf));
    }

    /*
    Export the given key and write it into the "exported-key" space.
    */
    async function exportPublicKey(key) {
        const exported = await window.crypto.subtle.exportKey("spki", key);
        const exportedAsString = ab2str(exported);
        const exportedAsBase64 = window.btoa(exportedAsString);
        const pemExported = `-----BEGIN PUBLIC KEY-----\n${exportedAsBase64}\n-----END PUBLIC KEY-----`;
        return pemExported;
    }
    /*
    Export the given key and write it into the "exported-key" space.
    */
    async function exportPrivateKey(key) {
        const exported = await window.crypto.subtle.exportKey("pkcs8", key);
        const exportedAsString = ab2str(exported);
        const exportedAsBase64 = window.btoa(exportedAsString);
        const pemExported = `-----BEGIN PRIVATE KEY-----\n${exportedAsBase64}\n-----END PRIVATE KEY-----`;
        return pemExported;
    }

    function importPrivateKey(pemKey) {
      return new Promise(function(resolve) {
        var importer = crypto.subtle.importKey("pkcs8", convertPemToBinary(pemKey), signAlgorithm, true, ["sign"])
        importer.then(function(key) {
          resolve(key)
        })
      })
    }

    function base64StringToArrayBuffer(b64str) {
        var byteStr = atob(b64str)
        var bytes = new Uint8Array(byteStr.length)
        for (var i = 0; i < byteStr.length; i++) {
            bytes[i] = byteStr.charCodeAt(i)
        }
        return bytes.buffer
    }

    function textToArrayBuffer(str) {
        var buf = unescape(encodeURIComponent(str)) // 2 bytes for each char
        var bufView = new Uint8Array(buf.length)
        for (var i=0; i < buf.length; i++) {
            bufView[i] = buf.charCodeAt(i)
        }
        return bufView
    }


    function convertPemToBinary(pem) {
        var lines = pem.split('\n')
        var encoded = ''
        for(var i = 0;i < lines.length;i++){
            if (lines[i].trim().length > 0 &&
                lines[i].indexOf('-BEGIN RSA PRIVATE KEY-') < 0 &&
                lines[i].indexOf('-BEGIN RSA PUBLIC KEY-') < 0 &&
                lines[i].indexOf('-END RSA PRIVATE KEY-') < 0 &&
                lines[i].indexOf('-END RSA PUBLIC KEY-') < 0) {
            encoded += lines[i].trim()
            }
        }
        return base64StringToArrayBuffer(encoded)
    }

    function importPublicKey(pemKey) {
        return new Promise(function(resolve) {
            var importer = crypto.subtle.importKey("spki", convertPemToBinary(pemKey), signAlgorithm, true, ["verify"])
            importer.then(function(key) {
            resolve(key)
            })
        })
    }

    // Test everything
    var signAlgorithm = {
        name: "RSASSA-PKCS1-v1_5",
        hash: {
            name: "SHA-256"
        },
        modulusLength: 2048,
        extractable: false,
        publicExponent: new Uint8Array([1, 0, 1])
    }


    // we'll send the message to the server by emitting a "send" event
    function send() {
        // ask the server for the receiver's public key if shared key not established
        if (sessionStorage.getItem("sharedKey") == null) {
            socket.emit("ask_receiver_public_key", room_id);
        }
        let message = $("#message").val();
        $("#message").val("");
        socket.emit("send", username, message, room_id);  
    } 

    // we emit a join room event to the server to join a room
    function join_room() {        
        sessionStorage.removeItem("sharedKey");
        sessionStorage.removeItem("secretKey");

        let receiver = $("#receiver").val();
        if (!{{ friends }}.includes(receiver)) {
            alert("Invalid receiver");
            return;
        }

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
            let secretKey = generateSecretKey();
            sessionStorage.setItem("secretKey", secretKey);
            
        });
     
    }


    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        sessionStorage.removeItem("sharedKey");
        sessionStorage.removeItem("secretKey");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }
    
</script>
{% endblock %}